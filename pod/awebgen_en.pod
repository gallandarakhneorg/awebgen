=head1 NAME

AWebGen - Arakhnê Web Generator

=head1 SYNOPSIS

awebgen [options]

=head1 DESCRIPTION

The Arakhnê Web Generator, aka. AWebGen, is a offline website generator.
This generator is replacing internal macro commands in a set of files to generate
the HTML website.

=head1 OPTIONS

=over 4

=item B<--[no]announce>

Send announcement email.

=item B<--[no]autoscript>

Generate or not the PHP scripts predefined in AWebGen.

=item B<-f>

If mirroring is enabled, force AWebGen to upload all the file and not only the changed files.

=item B<--maintenance>

Set the maintenance flag on. Depending on your website style, it could change the look of the generated site.

=item B<--mirror>=I<url>

=item B<--nomirror>

Put or not the generated website on the remote host.

=item B<--password>=I<text>

Specify the password to use to be connected to the mirror host.

=item B<--rss>=I<filename>

=item B<--norss>

Generate or do not generate a RSS file, and change its name to "I<filename>.rss". A RSS file named "news" is generated by default.

=item B<--style>=I<name>

Install the given style into the current directory. If this option is given, no website generation is proceeded.

=item B<--test>

Generate a test website in the direction ../test.

=item B<-v>

Be verbose.

=item B<--version>

Display AWebGen version and copyright text.

=back

=head1 CONFIGURATION FILE

The configuration directory, here labelled by "config_path" is supposed to be located in the root
directory of the website to generate. By default, the "config_path" is "./.awebgen".

The configuration file is a XML file named "config_path/config".

The configuration file must contains the tag <AWEBGEN />. The following subsections describe
the inner tags.

=head2 Profile Definition

Profiles could be defined according to several contraints. A profile could restrict the configuration
entries.

A profile must be defined in the tag <PROFILES/>. The following example defines a default profil named "home"
and a profile named "work" which is enalbed only if the host IP matches the given network addresses.

<PROFILES>
	<PROFILE name="home" default="yes" />
	<PROFILE name="work">
		<NETWORK ip="10.85.0.99/24" />
	</PROFILE>
</PROFILES>

=head2 Constant Definition

Is is possible to define a set of constant values in AWebGen. These definitions must appear in the <CONSTANTS/> tag.
Each constant pair is defined in a <CONSTANT> tag as followed:

<CONSTANT id="constant_name" value="constant_value" profile="profile_name" />

where the constant_name must be unique. If the profile wad given, the constant will be defined only if
the corresponding profile was enable. If no profile was given, the constant is always defined.

Several constants are recognized and used by AWebGen:

=over 6

=item announce-format indicates if the annoucement emails should use a HTML or a text form. Value must be one of "html" or "text";

=item COPYRIGHT_STRING is expanded to a copyright string "(c) y1-y2 n" where y1 is the first copyright date defined in constant COPYRIGHT_FIRST_YEAR, y2 is the last copyright date (YEAR constant), and n is the copyrighter name (SITE_NAME constant);

=item CSS_FILE is the URL path to the current CSS file;

=item DIFFERED_GENERATOR is an HTML string which is containing the name and the version of AWebGen. This variable will be replaced in the HTML files during the mirroring stage only;

=item EMAIL_CRYPT_KEY is the string which may replace the "at" character (@) when crypting email addresses.

=item GENERATOR is an HTML string which is containing the name and the version of AWebGen. This variable is immediatly replaced in the HTML files;

=item GENERATE_SEND_MESSAGE_SCRIPT is a string containing a boolean value ("true" or "false"). This constant indicates if the sendmessage PHP script will be generated. This constant is automatically set to "true" when CONTACT_FORM is expanded;

=item HIDE_ML_FORM is a boolean value which is used to indicates if the mailing list forms should be displayed or not;

=item HOMES is the directory where the user's home pages are located (by default "${ROOT}/homes");

=item IMG is the directory where images are stored (by default "${ROOT}/images");

=item LAST_CHANGE_DATE is the date of the last change of the page. This variable will be replaced in the HTML files during the mirroring stage only;

=item PAGE_TITLE is the title of the current page;

=item PAGE_COMMENT is the comment associated to the current page;

=item PAGE_KEYWORDS are the keywords associated to the current page;

=item ROOT is the relative path to the root directory;

=item SMTP_SERVER is the IP or the name of the SMTP server used to send announcement emails;

=item SMTP_SENDER is the email which will be used to send annoucement emails;

=item SITE_IMG is the URL path to the site's picture (by default ${IMG}/header.png);

=item SITE_NAME is the name of the website;

=item SITE_URL is the URL of the website;

=item TODAY is the current date and hour in international format.

=item YEAR is the current year in 4 digits.

=back

=head2 Page Definitions

It is possible to define several informations about the website pages in the <PAGES/> tag. Each page
is describes by a individual <PAGE/> tag. The supported attributes of the <PAGE/> tag are:

=over 4

=item I<id> is the unique identifier of the page.

=item I<url> is the path to the HTML page.

=item I<label> is the full name of the page.

=item I<short> is the short name of the page.

=item I<parent> is the identifier of the page which is a parent of this page.

=item I<snap> is the identifier used by the snap.php script to identify the files to download for this page. If the given string starts with "name|", the name is used in place of the first letter of the identifier as the parent directory in the generated link.

=item I<push> is a list of coma-separated identifier of arrays in which the page identifier will be pushed.

=item I<misc> is a list of coma-separated data associated to the page.

=item I<profile> indicates the profile for which the page information are defined.

=back

Example:
	<PAGE id    = "eclipse-subclipse"
              url   = "${ROOT}/eclipse/subclipse/index.html"
              label = "Subclipse: a SVN plugin for Eclipse"
	      short = "Eclipse Subclipse"
	      push  = "othersofts"
	      misc  = "eclipse-subclipse" />

=head2 Ignore Definitions

It is possible to say to AWebGen to ignore several things in the <IGNORES/> tag.

The tag <EXPAND pattern="<pattern>" profile="<profile>" /> permits to avoid AWebGen variable expansions in the file with a name matching the given <pattern> (written as a shell wildcard).

The tag <MIRROR pattern="<pattern>" profile="<profile>" /> permits to avoid AWebGen to upload the files witha name matching the given <pattern> (written as a shell wildcard).

=head2 Mirror Definition

Mirror hosts are used to upload the generated website. It is possible to define a mirror inside the configuration file with:

<MIRROR url="<url>" password="<password>" />

Currently, only FTP connexion are supported by AWebGen.

=head2 Annoucement Definition

Each time a news is appearing on the website, it could be also sent by email. To enable this feature, it is necessary to define a <ANNOUNCE/> tag in the configuration file:

<ANNOUNCE email="<annoucement_email>" format="html|text" />

=head2 Array Definitions

It is possible to define arrays for AWebGen. Some of them are already known by AWebGen, the other could be directly used in your website skeleton files. Arrays must be defined as following (here each value are pushed at the end of the referenced array):

<ARRAYS>
	<ARRAY name="..." profile="...">
		value
	</ARRAY>
	<ARRAYS name="...">
		value
	</ARRAYS>
</ARRAYS>

=head2 Hash Definitions

It is possible to define hash tables for AWebGen. Some of them are already known by AWebGen, the other could be directly used in your website skeleton files. Hashtables must be defined as following:

<HASHS>
	<HASH name="..." profile="...">
		<PAIR key="...">...</PAIR>
		<PAIR key="...">...</PAIR>
	</HASH>
	<HASH name="...">
		<PAIR key="...">...</PAIR>
		<PAIR key="...">...</PAIR>
	</HASH>
</HASHS>

=head1 MODEL FILES

AWebGen uses existing HTML files from the current directory as the files to generate. Theses files could include a model file which must be located in the directory "${ROOT}/.awebgen/include". These files are complete or part of HTML files.

For each file (.html, .php, .asp...) AWebGen parses them and replaces macro commands by the associated values.
The supported macro commands are:

=over 4

=item ${BEGIN:I<shtml_name>}

is opening a local context and is expanded to the content of the style file named "sI<shtml_name>.shtml" inside
the style file directory. See ${END} to close the context, and ${INCLUDE} to include a complete style file.

=item ${CONTACT_FORM:I<email>}

=item ${CONTACT_FORM:I<email>:I<sender>:I<subject>:I<message>}

=item ${CONTACT_FORM:I<email>:I<sender>:I<subject>:I<message>:I<redirect_url>}

=item ${CONTACT_FORM:I<email>:I<sender>:I<subject>:I<message>:I<redirect_url>:I<htmlcode>}

is expanded to a HTML contact formular. This formular is invoking the sendmessage PHP script.
I<email> is the address to contact. I<sender> is the default email or name of the message's
emitter. I<subject> and I<message> are respectively the subject and the content of the message
to put by default in the formular. I<redirect_url> is the URL of the page to be redirected
to after the email was sent (by default the current page). I<htmlcode> is a peace if HTML
code put back at the end of the HTML formular.

=item ${DEF:I<name>=I<value>}

defines a constant I<name> with the given I<value>. This macro is expanded to an empty string.

=item ${DEFMACRO:I<name>(I<$param1>,I<$params2>...)=I<code>}

defines a macro with the given I<name> and the given parameters. The new macro will be expanded to I<code>.
Each name of parameter must be prefixed by a dollar sign. There parameter names (dollar included) may
appear in the given I<code>. In this case they will be expanded with the text passed to the new macro when
it is expanded.

=item ${DEFUSE:I<name>=I<value>}

defines a constant I<name> with the given I<value>. This macro is expanded to the I<value>.

=item ${DIFFERED:I<id>:I<text>}

Mark the given I<text> as "does not change the informational content of the page". The given I<text> is expanded but temporary discarted to prevent any change of the last change date.

=item ${EMAIL:I<email>:I<label>}

is expanded as a formatted I<email> address link, optionally labeled with the given I<label>.

=item ${EMAIL_CRYPT:I<email>}

is expanded the crypted form of the given email.

=item ${EMAIL_DECRYPT:I<crypted_email>}

is expanded the uncrypted form of the given crypted email.

=item ${END:I<shtml_name>}

is closing a local context and is expanded to the content of the style file named "eI<shtml_name>.shtml" inside
the style file directory. See ${BEGIN} to open the context, and ${INCLUDE} to include a complete style file.

=item ${FAILURE:I<text>}

causes AWebGen to stop on a failure.

=item ${FIELD:I<fieldname>}

=item ${FIELD:I<fieldname>|I<default_text>}

is expanded to the value of the database field named I<fieldname> if the field was defined,
otherwise it is replaced by "" or I<default_text>.
This macro command is available only inside a database instruction
such as ${FOREACH}.

=item ${FOREACH:DB(I<dbname>):I<text>}

=item ${FOREACH:DB(I<dbname>)[I<min>..I<max>]:I<text>}

is expanding the I<text> in which the fields extracted from the database named I<dbname>
are accessible with the macro command ${FIELD}. If the I<min> and the I<max> arguments
are specified, only the database entries with an index inside the given interval will be
treated. The macro constant ${LOOPINDEX} is localy defined and contains the index of
the current field.

=item ${FOREACH:HTML(I<style_id>):I<dbase_content>}

=item ${FOREACH:HTML(I<style_id>)[I<min>..I<max>]:I<dbase_content>}

is expanding the content of the style file named I<style_id> on each entry of
the I<dbase_content>.
If the I<min> and the I<max> arguments
are specified, only the database entries with an index inside the given interval will be
treated. The macro constant ${LOOPINDEX} is localy defined and contains the index of
the current field.

=item ${FOREACH:PAGE(I<part_id>):I<text>}

=item ${FOREACH:PAGE(I<part_id>)[I<min>..I<max>]:I<text>}

is expanded information on HTML pages into the I<text>. The I<part_id> specifies which is
the information to be treated. It must be one of "url", "short", "label", "misc", "parent"
or "snap" for respectively the URL, the short name, the full name and the miscellaneous
informations of the page (see "configuration file" section for details).
If the I<min> and the I<max> arguments
are specified, only the pages with an index inside the given interval will be
treated. 
The macro constant ${LOOPINDEX} is localy defined and contains the index of
the current field. The macro command ${LOOPKEY} is the identifier of the current page.
And the macro command ${LOOPVAL} is the extracted value for the current page.

=item ${FOREACH:SORTED(@I<array_id>):I<text>}

=item ${FOREACH:SORTED(@I<array_id>)[I<condition>]:I<text>}

is expanding the I<text> in which the macro commands $$ and ${LOOPELT} will be expanded to
the value of the current array element extracted from an array named I<array_id>.
The array elements are sorted according to the
given I<condition> (Perl operators are used here) or by lexicographical order if not given.

=item ${FOREACH:SORTED(%I<hash_id>):I<text>}

=item ${FOREACH:SORTED(%I<hash_id>)[I<condition>]:I<text>}

is expanding the I<text> in which the macro commands $$, $1$ and ${LOOPKEY} will be expanded to
the key of the current hash pair extracted from a hash table named I<hash_id>. The macro
commands $2$ and ${LOOPVAL} will be expanded to the current pair value.
The pairs are sorted according to there keys and to the
given I<condition> (Perl operators are used here) or by lexicographical order if not given.

=item ${FOREACH:SORTED(I<id>):I<text>}

=item ${FOREACH:SORTED(I<id>)[I<condition>]:I<text>}

is expanded to array values (see ${FOREACH:SORTED(@)}) or to hash values (see ${FOREACH:SORTED(%)}).

=item ${GET:@I<array_id>[I<index>]}

=item ${GET:%I<hash_id>[I<key>]}

is expanded to the value extracted from an array or from an hash table. The first version is
to extract the value at the specified I<index> from the array named I<array_id> (see
configuration file section to define an array).  The second version is
to extract the value associated to the specified I<key> from the hash table named I<hash_id> (see
configuration file section to define a hash table).

=item ${IF:I<condition>:I<then_text>}

=item ${IF:I<condition>:I<then_text>:I<else_text>}

is expanded to I<then_text> if the I<condition> is true (Perl operators are allowed),
otherwise it is replaced by "" or I<else_text>.

=item ${IFBOOL:I<constantName>:I<then_text>}

=item ${IFBOOL:I<constantName>:I<then_text>:I<else_text>}

is expanded to I<then_text> if a constant named by I<constantName> was defined
and is equal to the boolean value "true", otherwise it is replaced by "" or
I<else_text>.

=item ${IFDB:I<dbname>:I<then_text>}

=item ${IFDB:I<dbname>:I<then_text>:I<else_text>}

is expanded to I<then_text> if the database file named I<dbname> is readable,
otherwise it is replaced by "" or I<else_text>.

=item ${IFDEF:I<constantName>:I<then_text>}

=item ${IFDEF:I<constantName>:I<then_text>:I<else_text>}

is expanded to I<then_text> if a constant named by I<constantName> was defined,
otherwise it is replaced by "" or I<else_text>. This macro does not checks the
value of the constant, only its definition is taken into account.

=item ${IFFIELD:I<fieldname>:I<then_text>}

=item ${IFFIELD:I<fieldname>:I<then_text>:I<else_text>}

is expanded to I<then_text> if the field was defined,
otherwise it is replaced by "" or I<else_text>.
This macro command is available only inside a database instruction
such as ${FOREACH}.

=item ${IFMAINTENANCE:I<then_text>}

=item ${IFMAINTENANCE:I<then_text>:I<else_text>}

is expanded to I<then_text> if AWebGen was launched with "--maintenance" parameter,
otherwise it is expanded to "" or to I<else_text>.

=item ${INCLUDE:I<shtml_name>}

is expanded to the content of the style file named "I<shtml_name>.shtml" inside
the style file directory. See ${BEGIN} and ${CLOSE} to open and close a context.

=item ${INCLUDEDEFS:I<local_file>}

is a particular implementation of an inclusion macro. It read the given local file
(relative filename from the directory where the file of this macro is located) and
ignore all the things (macros, HTML text) inside except for the definition and
condition macros (DEF, IF...).

=item ${JAVASCRIPT:I<javacode>}

permits to protect a peace of Javascript source code. This macro
encloses th given Javascript code inside the standard tags
<script type="text/javascript"> and </script>.

=item ${LENGTH:I<array_id>}

is expanded by the size of the array with the specified id.

=item ${LINK:I<url>}
=item ${LINK:I<url>:I<label>}

is expanded to an HTML <a> tag with the given I<url> and optionnally the given I<label>.

=item ${LOGENTRY:I<soft_id>:I<version>:I<authors>:I<date>:I<log_text>}

is expanded to the default log entry.

=item ${PAGE:I<page_id>}

is expanded by the url of the HTML page with the given I<page_id>.
See the configuration file section to define the pages.

=item ${PAGELABEL:I<page_id>}

is expanded by the full name of the HTML page with the given I<page_id>.
See the configuration file section to define the pages.

=item ${PAGELINK:I<page_id>}

is expanded by the full HTML link (with url and <a> tag) of the HTML page with the given I<page_id>.
The label of the link is the long description of the page from the configuration.
See the configuration file section to define the pages.

=item ${PAGEPARENT:I<page_id>}

is expanded by the identifier of the parent page.

=item ${PAGESHORTLABEL:I<page_id>}

is expanded by the short name of the HTML page with the given I<page_id>.
See the configuration file section to define the pages.

=item ${PAGESHORTLINK:I<page_id>}

is expanded by the full HTML link (with url and <a> tag) of the HTML page with the given I<page_id>.
The label of the link is the short description of the page from the configuration.
See the configuration file section to define the pages.

=item ${PROVIDE:I<name>=I<value>}

defines a constant I<name> with the given I<value> if it was never defined before. This macro is expanded to an empty string.

=item ${PROVIDEUSE:I<name>=I<value>}

defines a constant I<name> with the given I<value> if it was never defined before. This macro is expanded to the vlaue of the constant.

=item ${REMOVETAGS:I<text>}

is expanded to the given text in which all the HTML tags were removed.

=item ${REPLACE:I<text_to_replace>:I<replacement_text>:I<text>}

is expanded to the given I<text> in which all the occurences of the I<text_to_replace>
are replaced by the I<replacement_text>. This function does not support regular
expressions as I<text_to_replace>.

=item ${STR:I<text>}

ensures that the given text is a valid Perl text (protect the quotes...).

=item ${STYLIZE:I<text>}

is expanded to the given I<text> in which the current style may change some things.
This macro permits to apply several style's classes on the HTML tags according
to the current generation style. By default this macro does nothing.

=item ${TEXTLIST:I<text>}
=item ${TEXTLIST:I<text>:I<uclass>:I<lclass>}

assumes that the given I<text> is written according to a textual-list syntax (see below).
This macro expands the textual-list to its HTML equivalent.
In textual-list syntax, the list has two hierarchical levels. Each line starting with
a star (*) character is assuming to be a list's entry in the upper level. Each line
starting with a indent (-) character is assuming to be a list's entry in the lower level.
When given the I<uclass> and I<lclass> correspond to the CSS class styles of the UL tags
for the upper and lower levels respectively.

Example:
* First top level
* Second top level
  - First lower level
* Third top level
  - Second lower level

=item ${UNDEF:I<constant_id>}

remove the definition of the given constant identifier.

=item ${URLDECODE:I<encoded_url>}

is expanded to the url representing by the given uuencoded url.

=item ${URLENCODE:I<url>}

is expanded to an uuencoded url.

=item ${VALUE:I<constant_id>}

=item ${VALUE:I<constant_id>:I<default_text>}

is expanded to the value of the constant named I<constant_id> or the given I<default_text> if the constant was never defined.

=item ${WHILE:I<condition>}
=item ${WHILE:I<condition>:I<code>}

is expanded to the given code until the condition is false. The condition may respect the Perl syntax.

=back

Several HTML entities are directly expanded by AWebGen because they do not correspond to standard HTML but are provided by AWebGen for convenience because they have a specified semantic for AWebGen:

=over 4

=item "&obrace;" is expanded to "{"

=item "&cbrace;" is expanded to "}"

=item "&obracket;" is expanded to "["

=item "&cbracket;" is expanded to "]"

=item "&oparent;" is expanded to "("

=item "&cparent;" is expanded to ")"

=item "&dollar;" is expanded to "$"

=item "&star;" is expanded to "*"

=item "&col;" is expanded to ":"

=item "&column;" is expanded to ":"

=item "&shtmlcomment;" is expanded to "<!--"

=item "&ehtmlcomment;" is expanded to "-->"

=back

=head1 DATABASE FILES

=head2 Database File Format

Several files are assumed to be databases in which a lot of data could be put and used by AWebGen.
A database file is a text file in which each database entry is separated by a line with only the
character "." on it.
Each database entry is composed of fields. A field is defined by a field name and a value according
to the syntax: NAME=VALUE. The VALUE could be written on several lines.

The dabase file are supposed to be in the directory "config_path/db".

=head2 Standard Databases

Several standard database files are directly supported by AWebGen.

=over 4

=item B<news.txt> contains the news of the website. The supported fields are "DATE", "TITLE", "TEXT" and "LINK" (optional).
The name of the news database is given by the constant NEWS_DB (by default "news").

=back

=head1 AUTOSCRIPTS

A set of PHP scripts are embedded inside the AWebGen distribution. They could be directly put in the root directory of the generated website.

=over 4

=item B<index.php>

A file B<index.php> which is redirecting to the root page is generated in each directory without index file.

=item B<ml.php>

The file B<ml.php> permits to manage several mailing lists in a user point of view. This is generated only of a entry
named "mailinglists" was defined in the configuration hash tables (see "configuration file" section).
This hash table should map the mailing list identifiers as keys and the mailing list addresses as values.
Additionally, an hash table named "mailinglist-comments" could be defined to map the mailing list identifiers
to the textual descriptions of the mailing lists.

To work properly, two constants must be defined: ML_ADDRESS and ML_REQUEST_ADDRESS. Both are email address pattern in which the string
"${NAME}" will be replaced by the identifier of the mailing list. The ML_ADDRESS constant represents the posting email address to the
mailing list, and the ML_REQUEST_ADDRESS represents the register/unregister email address to the mailing list.

The B<ml.php> script displayes a page on which it is possible to register/unregister an email to/from a mailing. The "fullpage.shtml" file style is assumed to provide the HTML page skeleton.

=item B<redirect.php>

The file B<redirect.php> is generating at the website root. It permits to display a redirection message to a given url (specified with the HTML GET parameter named "url"). The displayed page is based on the model file "fullpage.shtml" (see "model files" section).

=item B<sendmessage.php>

The file B<sendmessage.php> permits to send emails. It is generated only when the constant
GENERATE_SEND_MESSAGE_SCRIPT is set to "true". This script provides a contact formular with
a security image to prevent robots to send emails.

The B<sendmessage.php> script displayes a page on which it is possible to fill the contact formular. The "fullpage.shtml" file style is assumed to provide the HTML page skeleton.

=item B<snap.php>

The file B<snap.php> permits to be redirected to a download page of software snapshots. It takes as several GET parameters

=over 6

=item the "project" name and optionally the "subproject" name. The snapshot URL is assumed to be defined in SNAP_URL and SNAP_URL_SUBPROJECT depending if the subproject name was given;

=item the Maven "groupId" and Maven "artifactId". The snapshot URL is supposed to be given by the MAVEN_REPOSITY constant followed by the group identifier and the artifact identifier. If the GET parameter "version" is specified, the string "version-SNAPSHOT" will be merge to the target location. In case the PHP
script is requiring to explore the Maven repository, you must fill the constant MAVEN_REPOSITORY_DIR with
the local path to the Maven repository root;

=item the "directory" name of the project and the "subproject" name. The snapshot URL is assumed to be defined by "flet/directory/subproject" or by "flet/directory" where "flet" is the first letter of the "directory".

=back 

The constant SNAP_URL must be defined as the redirection url when only a project name is given. The constant SNAP_URL_SUBPROJECT must be defined as the redirection url when both a project and subproject names are given. If the SNAP_URL_SUBPROJECT is not defined, it is assumed to be the same as SNAP_URL. The macro commands "${FLET}", "${NAME}" and "${SUBNAME}" could appear in the URL ("${SUBNAME}" only for SNAP_URL_SUBPROJECT). They will be replaced by the first letter of the project name, the project and the subproject name respectively.

=item B<spip.php>

The file B<spip.php> permits compatibility with a previous version of the website written with the SPIP content management system.
The B<spip.php> file is generated only if a database file named "spip.txt" was defined (see "database files" section). The database file supports the following entries:

=over 6

=item if PAGE_ID is defined it means that the entry if a standard page redirection. The spip page identifier must be put in PAGE_ID field, the target url must be put in TARGET field and optionally the COMMENT field could be defined;

=item if AUTHOR_ID is defined it means that the entry if an author page redirection. The spip author identifier must be put in AUTHOR_ID field, the target url must be put in TARGET field and optionally the COMMENT field could be defined;

=item if ERROR_PAGE is defined it means that the entry extends the message displayed my the "spip.php" page in case of error.

=back

If the file was generated other files that are correspondiong to oldest SPIP version are also generated: article.php, article.php3,
rubrique.php, rubrique.php3, auteur.php, and auteur.php3.

=item B<websvn.php>

The file B<websvn.php> permits to be redirected to a WebSVN page. It takes as GET parameter the "project" name and the "subproject" name.
The redirection URL is specified in the WEBSVN_URL and WEBSVN_FULL_URL constants in the configuration files (see "configuration file" section). Eahc of these constants could contain the strings "${PROJECT}" or "${SUBPROJECT}" which will be replaced by the name of the project and the subproject respectively. The WEBSVN_URL is assumed to be the URL to access to the SVN with a project name only, and the WEBSVN_FULL_URL is assumed to be the URL to access to the SVN with both project and a subproject names.

=back
